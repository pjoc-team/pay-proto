// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pay_db_service.proto

package pay

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *BasePayOrder) Validate() error {
	return nil
}
func (this *PayOrder) Validate() error {
	if this.BasePayOrder != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.BasePayOrder); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("BasePayOrder", err)
		}
	}
	return nil
}
func (this *PayOrderOk) Validate() error {
	if this.BasePayOrder != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.BasePayOrder); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("BasePayOrder", err)
		}
	}
	return nil
}
func (this *PayNotice) Validate() error {
	return nil
}
func (this *PayNoticeOk) Validate() error {
	return nil
}
func (this *PayOrderResponse) Validate() error {
	for _, item := range this.PayOrders {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("PayOrders", err)
			}
		}
	}
	return nil
}
func (this *PayOrderOkResponse) Validate() error {
	for _, item := range this.PayOrderOks {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("PayOrderOks", err)
			}
		}
	}
	return nil
}
func (this *PayNoticeResponse) Validate() error {
	for _, item := range this.PayNotices {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("PayNotices", err)
			}
		}
	}
	return nil
}
func (this *PayNoticeOkResponse) Validate() error {
	for _, item := range this.PayNoticeOks {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("PayNoticeOks", err)
			}
		}
	}
	return nil
}
