// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pay_gateway.proto

package pay

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _pay_gateway_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PayRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PayRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	if utf8.RuneCountInString(m.GetOutTradeNo()) > 64 {
		return PayRequestValidationError{
			field:  "OutTradeNo",
			reason: "value length must be at most 64 runes",
		}
	}

	if !_PayRequest_OutTradeNo_Pattern.MatchString(m.GetOutTradeNo()) {
		return PayRequestValidationError{
			field:  "OutTradeNo",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if val := m.GetPayAmount(); val < 1 || val > 1000000000 {
		return PayRequestValidationError{
			field:  "PayAmount",
			reason: "value must be inside range [1, 1000000000]",
		}
	}

	// no validation rules for Currency

	// no validation rules for NotifyUrl

	// no validation rules for ReturnUrl

	if utf8.RuneCountInString(m.GetAppId()) < 1 {
		return PayRequestValidationError{
			field:  "AppId",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_PayRequest_AppId_Pattern.MatchString(m.GetAppId()) {
		return PayRequestValidationError{
			field:  "AppId",
			reason: "value does not match regex pattern \"^\\\\w+$\"",
		}
	}

	// no validation rules for SignType

	if utf8.RuneCountInString(m.GetSign()) < 1 {
		return PayRequestValidationError{
			field:  "Sign",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_PayRequest_Sign_Pattern.MatchString(m.GetSign()) {
		return PayRequestValidationError{
			field:  "Sign",
			reason: "value does not match regex pattern \"^[A-Za-z0-9+/=\\\\s\\\\n\\\\r]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetOrderTime()); l < 20 || l > 64 {
		return PayRequestValidationError{
			field:  "OrderTime",
			reason: "value length must be between 20 and 64 runes, inclusive",
		}
	}

	if !_PayRequest_OrderTime_Pattern.MatchString(m.GetOrderTime()) {
		return PayRequestValidationError{
			field:  "OrderTime",
			reason: "value does not match regex pattern \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$\"",
		}
	}

	// no validation rules for UserIp

	// no validation rules for UserId

	// no validation rules for PayerAccount

	// no validation rules for ProductId

	// no validation rules for ProductName

	// no validation rules for ProductDescribe

	// no validation rules for Charset

	// no validation rules for CallbackJson

	// no validation rules for ExtJson

	// no validation rules for ChannelId

	if _, ok := Method_name[int32(m.GetMethod())]; !ok {
		return PayRequestValidationError{
			field:  "Method",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// PayRequestValidationError is the validation error returned by
// PayRequest.Validate if the designated constraints aren't met.
type PayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayRequestValidationError) ErrorName() string { return "PayRequestValidationError" }

// Error satisfies the builtin error interface
func (e PayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayRequestValidationError{}

var _PayRequest_OutTradeNo_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _PayRequest_AppId_Pattern = regexp.MustCompile("^\\w+$")

var _PayRequest_Sign_Pattern = regexp.MustCompile("^[A-Za-z0-9+/=\\s\\n\\r]+$")

var _PayRequest_OrderTime_Pattern = regexp.MustCompile("^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$")

// Validate checks the field values on PayResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PayResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GatewayOrderId

	if l := utf8.RuneCountInString(m.GetCreateTime()); l < 20 || l > 64 {
		return PayResponseValidationError{
			field:  "CreateTime",
			reason: "value length must be between 20 and 64 runes, inclusive",
		}
	}

	if !_PayResponse_CreateTime_Pattern.MatchString(m.GetCreateTime()) {
		return PayResponseValidationError{
			field:  "CreateTime",
			reason: "value does not match regex pattern \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetUpdateTime()); l < 20 || l > 64 {
		return PayResponseValidationError{
			field:  "UpdateTime",
			reason: "value length must be between 20 and 64 runes, inclusive",
		}
	}

	if !_PayResponse_UpdateTime_Pattern.MatchString(m.GetUpdateTime()) {
		return PayResponseValidationError{
			field:  "UpdateTime",
			reason: "value does not match regex pattern \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$\"",
		}
	}

	// no validation rules for Data

	return nil
}

// PayResponseValidationError is the validation error returned by
// PayResponse.Validate if the designated constraints aren't met.
type PayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayResponseValidationError) ErrorName() string { return "PayResponseValidationError" }

// Error satisfies the builtin error interface
func (e PayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayResponseValidationError{}

var _PayResponse_CreateTime_Pattern = regexp.MustCompile("^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$")

var _PayResponse_UpdateTime_Pattern = regexp.MustCompile("^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$")
