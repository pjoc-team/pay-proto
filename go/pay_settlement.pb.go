// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pay_settlement.proto

package pay

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SettlementRequest struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GatewayOrderId       string   `protobuf:"bytes,2,opt,name=gateway_order_id,json=gatewayOrderId,proto3" json:"gateway_order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettlementRequest) Reset()         { *m = SettlementRequest{} }
func (m *SettlementRequest) String() string { return proto.CompactTextString(m) }
func (*SettlementRequest) ProtoMessage()    {}
func (*SettlementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9b3e5b08c4cded7, []int{0}
}

func (m *SettlementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementRequest.Unmarshal(m, b)
}
func (m *SettlementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementRequest.Marshal(b, m, deterministic)
}
func (m *SettlementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementRequest.Merge(m, src)
}
func (m *SettlementRequest) XXX_Size() int {
	return xxx_messageInfo_SettlementRequest.Size(m)
}
func (m *SettlementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementRequest proto.InternalMessageInfo

func (m *SettlementRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SettlementRequest) GetGatewayOrderId() string {
	if m != nil {
		return m.GatewayOrderId
	}
	return ""
}

type SettlementPayOrder struct {
	Version              string    `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Order                *PayOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SettlementPayOrder) Reset()         { *m = SettlementPayOrder{} }
func (m *SettlementPayOrder) String() string { return proto.CompactTextString(m) }
func (*SettlementPayOrder) ProtoMessage()    {}
func (*SettlementPayOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9b3e5b08c4cded7, []int{1}
}

func (m *SettlementPayOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementPayOrder.Unmarshal(m, b)
}
func (m *SettlementPayOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementPayOrder.Marshal(b, m, deterministic)
}
func (m *SettlementPayOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementPayOrder.Merge(m, src)
}
func (m *SettlementPayOrder) XXX_Size() int {
	return xxx_messageInfo_SettlementPayOrder.Size(m)
}
func (m *SettlementPayOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementPayOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementPayOrder proto.InternalMessageInfo

func (m *SettlementPayOrder) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SettlementPayOrder) GetOrder() *PayOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

type SettlementResponse struct {
	Result               *ReturnResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SettlementResponse) Reset()         { *m = SettlementResponse{} }
func (m *SettlementResponse) String() string { return proto.CompactTextString(m) }
func (*SettlementResponse) ProtoMessage()    {}
func (*SettlementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9b3e5b08c4cded7, []int{2}
}

func (m *SettlementResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementResponse.Unmarshal(m, b)
}
func (m *SettlementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementResponse.Marshal(b, m, deterministic)
}
func (m *SettlementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementResponse.Merge(m, src)
}
func (m *SettlementResponse) XXX_Size() int {
	return xxx_messageInfo_SettlementResponse.Size(m)
}
func (m *SettlementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementResponse proto.InternalMessageInfo

func (m *SettlementResponse) GetResult() *ReturnResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*SettlementRequest)(nil), "pay.SettlementRequest")
	proto.RegisterType((*SettlementPayOrder)(nil), "pay.SettlementPayOrder")
	proto.RegisterType((*SettlementResponse)(nil), "pay.SettlementResponse")
}

func init() { proto.RegisterFile("pay_settlement.proto", fileDescriptor_d9b3e5b08c4cded7) }

var fileDescriptor_d9b3e5b08c4cded7 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x51, 0x6b, 0x13, 0x41,
	0x10, 0xc7, 0x49, 0xc4, 0x8a, 0x1b, 0x8d, 0x76, 0xab, 0x36, 0x0d, 0x82, 0x7a, 0x82, 0xd4, 0x62,
	0x6f, 0x31, 0x82, 0x0f, 0x7d, 0x11, 0x7c, 0x11, 0x5f, 0xb4, 0x5c, 0x40, 0x1f, 0xc3, 0xde, 0xdd,
	0xf4, 0x5c, 0xcd, 0xed, 0xac, 0xbb, 0x73, 0x09, 0x41, 0x7c, 0xf1, 0x2b, 0xf8, 0x85, 0xfc, 0x0e,
	0x7e, 0x05, 0x3f, 0x88, 0x64, 0x6e, 0xaf, 0xa9, 0x2d, 0x0a, 0x3e, 0xdd, 0xcd, 0x7f, 0x66, 0x7e,
	0xff, 0x99, 0x61, 0xc5, 0x2d, 0xa7, 0x57, 0xb3, 0x00, 0x44, 0x73, 0xa8, 0xc1, 0x52, 0xea, 0x3c,
	0x12, 0xca, 0x4b, 0x4e, 0xaf, 0xc6, 0x77, 0x2b, 0xc4, 0x6a, 0x0e, 0x4a, 0x3b, 0xa3, 0xb4, 0xb5,
	0x48, 0x9a, 0x0c, 0xda, 0xd0, 0x96, 0x8c, 0xef, 0xc5, 0x2c, 0x47, 0x79, 0x73, 0xa2, 0xc8, 0xd4,
	0x10, 0x48, 0xd7, 0x2e, 0x16, 0x5c, 0x2b, 0xb0, 0xae, 0xd1, 0xc6, 0x88, 0x7d, 0xca, 0x7c, 0x16,
	0xc0, 0x2f, 0x4c, 0x01, 0x51, 0x7d, 0x5e, 0x19, 0xfa, 0xd0, 0xe4, 0x69, 0x81, 0xb5, 0xaa, 0x97,
	0x86, 0x3e, 0xe1, 0x52, 0x55, 0x78, 0xc8, 0xc9, 0xc3, 0x85, 0x9e, 0x9b, 0x52, 0x13, 0xfa, 0xa0,
	0x4e, 0x7f, 0xdb, 0xbe, 0xe4, 0xbd, 0xd8, 0x9e, 0x9e, 0xce, 0x9c, 0xc1, 0xe7, 0x06, 0x02, 0xc9,
	0x91, 0xb8, 0xb2, 0x00, 0x1f, 0x0c, 0xda, 0x51, 0xef, 0x7e, 0x6f, 0xff, 0x6a, 0xd6, 0x85, 0x72,
	0x5f, 0xdc, 0xac, 0x34, 0xc1, 0x52, 0xaf, 0x66, 0xe8, 0x4b, 0xf0, 0x33, 0x53, 0x8e, 0xfa, 0x5c,
	0x32, 0x8c, 0xfa, 0xdb, 0xb5, 0xfc, 0xba, 0x4c, 0xa6, 0x42, 0x6e, 0xc0, 0xc7, 0x51, 0xff, 0x07,
	0xf9, 0xa1, 0xb8, 0xcc, 0x44, 0xc6, 0x0d, 0x26, 0xd7, 0x53, 0xa7, 0x57, 0x69, 0xd7, 0x97, 0xb5,
	0xb9, 0xe4, 0xc5, 0x59, 0x68, 0x06, 0xc1, 0xa1, 0x0d, 0x20, 0x1f, 0x8b, 0x2d, 0x0f, 0xa1, 0x99,
	0x13, 0x33, 0x07, 0x93, 0x6d, 0xee, 0xcd, 0x80, 0x1a, 0x6f, 0x33, 0x4e, 0x64, 0xb1, 0x60, 0xf2,
	0xa3, 0x7f, 0x76, 0xdf, 0x57, 0xed, 0xc8, 0x12, 0xc5, 0xf0, 0xd8, 0x63, 0x01, 0x21, 0x4c, 0x9b,
	0x62, 0xfd, 0x91, 0x77, 0x18, 0x71, 0xe1, 0x32, 0xe3, 0xdd, 0x0b, 0x7a, 0x3b, 0x43, 0xf2, 0xe4,
	0xdb, 0xcf, 0x5f, 0xdf, 0xfb, 0x8f, 0x92, 0x07, 0x6a, 0xf1, 0x54, 0x6d, 0x5e, 0x81, 0xfa, 0x72,
	0xfe, 0x5c, 0x5f, 0x8f, 0x7a, 0x07, 0x32, 0x17, 0x3b, 0xd1, 0x90, 0xd7, 0xeb, 0x5c, 0xcf, 0xd3,
	0xbb, 0xf5, 0xff, 0x6e, 0xbb, 0xc7, 0xb6, 0x3b, 0xc9, 0xf0, 0x4f, 0xdb, 0xb5, 0xc7, 0x3b, 0x31,
	0x78, 0x83, 0x64, 0x4e, 0xe2, 0xe5, 0xff, 0x9f, 0x7d, 0x9b, 0xd9, 0x37, 0x12, 0xb1, 0x66, 0x5b,
	0x46, 0x1d, 0xf5, 0x0e, 0x5e, 0xee, 0x89, 0x5d, 0xd7, 0xe4, 0xa9, 0xfb, 0x88, 0x05, 0x77, 0x6e,
	0x5c, 0xf3, 0x2d, 0x7e, 0x53, 0xcf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x69, 0xad, 0x2f, 0x51,
	0x0b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SettlementGatewayClient is the client API for SettlementGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SettlementGatewayClient interface {
	ProcessSuccess(ctx context.Context, in *SettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	ProcessOrderSuccess(ctx context.Context, in *SettlementPayOrder, opts ...grpc.CallOption) (*SettlementResponse, error)
	NotifyOrder(ctx context.Context, in *SettlementPayOrder, opts ...grpc.CallOption) (*SettlementResponse, error)
}

type settlementGatewayClient struct {
	cc *grpc.ClientConn
}

func NewSettlementGatewayClient(cc *grpc.ClientConn) SettlementGatewayClient {
	return &settlementGatewayClient{cc}
}

func (c *settlementGatewayClient) ProcessSuccess(ctx context.Context, in *SettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, "/pay.SettlementGateway/ProcessSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementGatewayClient) ProcessOrderSuccess(ctx context.Context, in *SettlementPayOrder, opts ...grpc.CallOption) (*SettlementResponse, error) {
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, "/pay.SettlementGateway/ProcessOrderSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementGatewayClient) NotifyOrder(ctx context.Context, in *SettlementPayOrder, opts ...grpc.CallOption) (*SettlementResponse, error) {
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, "/pay.SettlementGateway/NotifyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettlementGatewayServer is the server API for SettlementGateway service.
type SettlementGatewayServer interface {
	ProcessSuccess(context.Context, *SettlementRequest) (*SettlementResponse, error)
	ProcessOrderSuccess(context.Context, *SettlementPayOrder) (*SettlementResponse, error)
	NotifyOrder(context.Context, *SettlementPayOrder) (*SettlementResponse, error)
}

func RegisterSettlementGatewayServer(s *grpc.Server, srv SettlementGatewayServer) {
	s.RegisterService(&_SettlementGateway_serviceDesc, srv)
}

func _SettlementGateway_ProcessSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementGatewayServer).ProcessSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.SettlementGateway/ProcessSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementGatewayServer).ProcessSuccess(ctx, req.(*SettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementGateway_ProcessOrderSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettlementPayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementGatewayServer).ProcessOrderSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.SettlementGateway/ProcessOrderSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementGatewayServer).ProcessOrderSuccess(ctx, req.(*SettlementPayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementGateway_NotifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettlementPayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementGatewayServer).NotifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.SettlementGateway/NotifyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementGatewayServer).NotifyOrder(ctx, req.(*SettlementPayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

var _SettlementGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pay.SettlementGateway",
	HandlerType: (*SettlementGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessSuccess",
			Handler:    _SettlementGateway_ProcessSuccess_Handler,
		},
		{
			MethodName: "ProcessOrderSuccess",
			Handler:    _SettlementGateway_ProcessOrderSuccess_Handler,
		},
		{
			MethodName: "NotifyOrder",
			Handler:    _SettlementGateway_NotifyOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay_settlement.proto",
}
