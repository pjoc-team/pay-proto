// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: pay_settlement.proto

package pay

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SettlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GatewayOrderId string `protobuf:"bytes,2,opt,name=gateway_order_id,json=gatewayOrderId,proto3" json:"gateway_order_id,omitempty"`
}

func (x *SettlementRequest) Reset() {
	*x = SettlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_settlement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementRequest) ProtoMessage() {}

func (x *SettlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pay_settlement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementRequest.ProtoReflect.Descriptor instead.
func (*SettlementRequest) Descriptor() ([]byte, []int) {
	return file_pay_settlement_proto_rawDescGZIP(), []int{0}
}

func (x *SettlementRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SettlementRequest) GetGatewayOrderId() string {
	if x != nil {
		return x.GatewayOrderId
	}
	return ""
}

type SettlementPayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string    `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Order   *PayOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SettlementPayOrder) Reset() {
	*x = SettlementPayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_settlement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementPayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementPayOrder) ProtoMessage() {}

func (x *SettlementPayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_pay_settlement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementPayOrder.ProtoReflect.Descriptor instead.
func (*SettlementPayOrder) Descriptor() ([]byte, []int) {
	return file_pay_settlement_proto_rawDescGZIP(), []int{1}
}

func (x *SettlementPayOrder) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SettlementPayOrder) GetOrder() *PayOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

type SettlementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *ReturnResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SettlementResponse) Reset() {
	*x = SettlementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_settlement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementResponse) ProtoMessage() {}

func (x *SettlementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pay_settlement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementResponse.ProtoReflect.Descriptor instead.
func (*SettlementResponse) Descriptor() ([]byte, []int) {
	return file_pay_settlement_proto_rawDescGZIP(), []int{2}
}

func (x *SettlementResponse) GetResult() *ReturnResult {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_pay_settlement_proto protoreflect.FileDescriptor

var file_pay_settlement_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x61, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x62, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x12, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xc0, 0x02, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x6f, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70,
	0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x61, 0x79,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a,
	0x17, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x01, 0x2a, 0x42,
	0x1e, 0x0a, 0x17, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x6a, 0x6f, 0x63, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5a, 0x03, 0x70, 0x61, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pay_settlement_proto_rawDescOnce sync.Once
	file_pay_settlement_proto_rawDescData = file_pay_settlement_proto_rawDesc
)

func file_pay_settlement_proto_rawDescGZIP() []byte {
	file_pay_settlement_proto_rawDescOnce.Do(func() {
		file_pay_settlement_proto_rawDescData = protoimpl.X.CompressGZIP(file_pay_settlement_proto_rawDescData)
	})
	return file_pay_settlement_proto_rawDescData
}

var file_pay_settlement_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pay_settlement_proto_goTypes = []interface{}{
	(*SettlementRequest)(nil),  // 0: pay.SettlementRequest
	(*SettlementPayOrder)(nil), // 1: pay.SettlementPayOrder
	(*SettlementResponse)(nil), // 2: pay.SettlementResponse
	(*PayOrder)(nil),           // 3: pay.PayOrder
	(*ReturnResult)(nil),       // 4: pay.ReturnResult
}
var file_pay_settlement_proto_depIdxs = []int32{
	3, // 0: pay.SettlementPayOrder.order:type_name -> pay.PayOrder
	4, // 1: pay.SettlementResponse.result:type_name -> pay.ReturnResult
	0, // 2: pay.SettlementGateway.ProcessSuccess:input_type -> pay.SettlementRequest
	1, // 3: pay.SettlementGateway.ProcessOrderSuccess:input_type -> pay.SettlementPayOrder
	1, // 4: pay.SettlementGateway.NotifyOrder:input_type -> pay.SettlementPayOrder
	2, // 5: pay.SettlementGateway.ProcessSuccess:output_type -> pay.SettlementResponse
	2, // 6: pay.SettlementGateway.ProcessOrderSuccess:output_type -> pay.SettlementResponse
	2, // 7: pay.SettlementGateway.NotifyOrder:output_type -> pay.SettlementResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pay_settlement_proto_init() }
func file_pay_settlement_proto_init() {
	if File_pay_settlement_proto != nil {
		return
	}
	file_common_proto_init()
	file_pay_db_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pay_settlement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_settlement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementPayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_settlement_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pay_settlement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pay_settlement_proto_goTypes,
		DependencyIndexes: file_pay_settlement_proto_depIdxs,
		MessageInfos:      file_pay_settlement_proto_msgTypes,
	}.Build()
	File_pay_settlement_proto = out.File
	file_pay_settlement_proto_rawDesc = nil
	file_pay_settlement_proto_goTypes = nil
	file_pay_settlement_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SettlementGatewayClient is the client API for SettlementGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SettlementGatewayClient interface {
	ProcessSuccess(ctx context.Context, in *SettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error)
	ProcessOrderSuccess(ctx context.Context, in *SettlementPayOrder, opts ...grpc.CallOption) (*SettlementResponse, error)
	NotifyOrder(ctx context.Context, in *SettlementPayOrder, opts ...grpc.CallOption) (*SettlementResponse, error)
}

type settlementGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewSettlementGatewayClient(cc grpc.ClientConnInterface) SettlementGatewayClient {
	return &settlementGatewayClient{cc}
}

func (c *settlementGatewayClient) ProcessSuccess(ctx context.Context, in *SettlementRequest, opts ...grpc.CallOption) (*SettlementResponse, error) {
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, "/pay.SettlementGateway/ProcessSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementGatewayClient) ProcessOrderSuccess(ctx context.Context, in *SettlementPayOrder, opts ...grpc.CallOption) (*SettlementResponse, error) {
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, "/pay.SettlementGateway/ProcessOrderSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementGatewayClient) NotifyOrder(ctx context.Context, in *SettlementPayOrder, opts ...grpc.CallOption) (*SettlementResponse, error) {
	out := new(SettlementResponse)
	err := c.cc.Invoke(ctx, "/pay.SettlementGateway/NotifyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettlementGatewayServer is the server API for SettlementGateway service.
type SettlementGatewayServer interface {
	ProcessSuccess(context.Context, *SettlementRequest) (*SettlementResponse, error)
	ProcessOrderSuccess(context.Context, *SettlementPayOrder) (*SettlementResponse, error)
	NotifyOrder(context.Context, *SettlementPayOrder) (*SettlementResponse, error)
}

// UnimplementedSettlementGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedSettlementGatewayServer struct {
}

func (*UnimplementedSettlementGatewayServer) ProcessSuccess(context.Context, *SettlementRequest) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSuccess not implemented")
}
func (*UnimplementedSettlementGatewayServer) ProcessOrderSuccess(context.Context, *SettlementPayOrder) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOrderSuccess not implemented")
}
func (*UnimplementedSettlementGatewayServer) NotifyOrder(context.Context, *SettlementPayOrder) (*SettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyOrder not implemented")
}

func RegisterSettlementGatewayServer(s *grpc.Server, srv SettlementGatewayServer) {
	s.RegisterService(&_SettlementGateway_serviceDesc, srv)
}

func _SettlementGateway_ProcessSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementGatewayServer).ProcessSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.SettlementGateway/ProcessSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementGatewayServer).ProcessSuccess(ctx, req.(*SettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementGateway_ProcessOrderSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettlementPayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementGatewayServer).ProcessOrderSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.SettlementGateway/ProcessOrderSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementGatewayServer).ProcessOrderSuccess(ctx, req.(*SettlementPayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementGateway_NotifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettlementPayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementGatewayServer).NotifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.SettlementGateway/NotifyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementGatewayServer).NotifyOrder(ctx, req.(*SettlementPayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

var _SettlementGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pay.SettlementGateway",
	HandlerType: (*SettlementGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessSuccess",
			Handler:    _SettlementGateway_ProcessSuccess_Handler,
		},
		{
			MethodName: "ProcessOrderSuccess",
			Handler:    _SettlementGateway_ProcessOrderSuccess_Handler,
		},
		{
			MethodName: "NotifyOrder",
			Handler:    _SettlementGateway_NotifyOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay_settlement.proto",
}
