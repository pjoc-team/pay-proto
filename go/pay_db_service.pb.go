// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: pay_db_service.proto

package pay

import (
	context "context"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BasePayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,100,opt,name=version,proto3" json:"version,omitempty"`
	// 业务订单号
	OutTradeNo string `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	// 渠道账号
	ChannelAccount string `protobuf:"bytes,2,opt,name=channel_account,json=channelAccount,proto3" json:"channel_account,omitempty"`
	// 渠道订单号
	ChannelOrderId string `protobuf:"bytes,21,opt,name=channel_order_id,json=channelOrderId,proto3" json:"channel_order_id,omitempty"`
	// 网关订单号
	GatewayOrderId string `protobuf:"bytes,22,opt,name=gateway_order_id,json=gatewayOrderId,proto3" json:"gateway_order_id,omitempty"`
	// 支付金额（分）
	PayAmount uint32 `protobuf:"varint,3,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount,omitempty"`
	// 币种
	Currency string `protobuf:"bytes,25,opt,name=currency,proto3" json:"currency,omitempty"`
	// 接收通知的地址，不能带参数（即：不能包含问号）
	NotifyUrl string `protobuf:"bytes,4,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	// 支付后跳转的前端地址
	ReturnUrl string `protobuf:"bytes,5,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`
	// 系统给商户分配的app_id
	AppId string `protobuf:"bytes,6,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// 加密方法，rsa和md5，默认rsa
	SignType string `protobuf:"bytes,7,opt,name=sign_type,json=signType,proto3" json:"sign_type,omitempty"`
	// 下单时间
	OrderTime string `protobuf:"bytes,8,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
	// 请求到网关的时间
	RequestTime string `protobuf:"bytes,20,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	// 订单创建日期
	CreateDate string `protobuf:"bytes,23,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	// 发起支付的用户ip
	UserIp string `protobuf:"bytes,9,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`
	// 用户在业务系统的id
	UserId string `protobuf:"bytes,18,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 支付者账号，可选
	PayerAccount string `protobuf:"bytes,10,opt,name=payer_account,json=payerAccount,proto3" json:"payer_account,omitempty"`
	// 产品id
	ProductId string `protobuf:"bytes,11,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 商品名称
	ProductName string `protobuf:"bytes,12,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// 商品描述
	ProductDescribe string `protobuf:"bytes,13,opt,name=product_describe,json=productDescribe,proto3" json:"product_describe,omitempty"`
	// 回调业务系统时需要带上的字符串
	CallbackJson string `protobuf:"bytes,16,opt,name=callback_json,json=callbackJson,proto3" json:"callback_json,omitempty"`
	// 扩展json
	ExtJson string `protobuf:"bytes,17,opt,name=ext_json,json=extJson,proto3" json:"ext_json,omitempty"`
	// 渠道返回的json
	ChannelResponseJson string `protobuf:"bytes,26,opt,name=channel_response_json,json=channelResponseJson,proto3" json:"channel_response_json,omitempty"`
	// 下单错误信息
	ErrorMessage string `protobuf:"bytes,27,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// 渠道id（非必须），如果未指定method，系统会根据method来找到可用的channel_id
	ChannelId string `protobuf:"bytes,19,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Method    string `protobuf:"bytes,98,opt,name=method,proto3" json:"method,omitempty"`
	Remark    string `protobuf:"bytes,24,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *BasePayOrder) Reset() {
	*x = BasePayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasePayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasePayOrder) ProtoMessage() {}

func (x *BasePayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasePayOrder.ProtoReflect.Descriptor instead.
func (*BasePayOrder) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{0}
}

func (x *BasePayOrder) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BasePayOrder) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *BasePayOrder) GetChannelAccount() string {
	if x != nil {
		return x.ChannelAccount
	}
	return ""
}

func (x *BasePayOrder) GetChannelOrderId() string {
	if x != nil {
		return x.ChannelOrderId
	}
	return ""
}

func (x *BasePayOrder) GetGatewayOrderId() string {
	if x != nil {
		return x.GatewayOrderId
	}
	return ""
}

func (x *BasePayOrder) GetPayAmount() uint32 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

func (x *BasePayOrder) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BasePayOrder) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *BasePayOrder) GetReturnUrl() string {
	if x != nil {
		return x.ReturnUrl
	}
	return ""
}

func (x *BasePayOrder) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *BasePayOrder) GetSignType() string {
	if x != nil {
		return x.SignType
	}
	return ""
}

func (x *BasePayOrder) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *BasePayOrder) GetRequestTime() string {
	if x != nil {
		return x.RequestTime
	}
	return ""
}

func (x *BasePayOrder) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *BasePayOrder) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

func (x *BasePayOrder) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BasePayOrder) GetPayerAccount() string {
	if x != nil {
		return x.PayerAccount
	}
	return ""
}

func (x *BasePayOrder) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *BasePayOrder) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *BasePayOrder) GetProductDescribe() string {
	if x != nil {
		return x.ProductDescribe
	}
	return ""
}

func (x *BasePayOrder) GetCallbackJson() string {
	if x != nil {
		return x.CallbackJson
	}
	return ""
}

func (x *BasePayOrder) GetExtJson() string {
	if x != nil {
		return x.ExtJson
	}
	return ""
}

func (x *BasePayOrder) GetChannelResponseJson() string {
	if x != nil {
		return x.ChannelResponseJson
	}
	return ""
}

func (x *BasePayOrder) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BasePayOrder) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BasePayOrder) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BasePayOrder) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type PayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasePayOrder *BasePayOrder `protobuf:"bytes,1,opt,name=base_pay_order,json=basePayOrder,proto3" json:"base_pay_order,omitempty"`
	OrderStatus  string        `protobuf:"bytes,2,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
}

func (x *PayOrder) Reset() {
	*x = PayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrder) ProtoMessage() {}

func (x *PayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrder.ProtoReflect.Descriptor instead.
func (*PayOrder) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{1}
}

func (x *PayOrder) GetBasePayOrder() *BasePayOrder {
	if x != nil {
		return x.BasePayOrder
	}
	return nil
}

func (x *PayOrder) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

type PayOrderOk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasePayOrder    *BasePayOrder `protobuf:"bytes,1,opt,name=base_pay_order,json=basePayOrder,proto3" json:"base_pay_order,omitempty"`
	SuccessTime     string        `protobuf:"bytes,2,opt,name=success_time,json=successTime,proto3" json:"success_time,omitempty"`
	BalanceDate     string        `protobuf:"bytes,3,opt,name=balance_date,json=balanceDate,proto3" json:"balance_date,omitempty"`
	FareAmt         uint32        `protobuf:"varint,4,opt,name=fare_amt,json=fareAmt,proto3" json:"fare_amt,omitempty"`
	FactAmt         uint32        `protobuf:"varint,5,opt,name=fact_amt,json=factAmt,proto3" json:"fact_amt,omitempty"`
	SendNotifyStats string        `protobuf:"bytes,6,opt,name=send_notify_stats,json=sendNotifyStats,proto3" json:"send_notify_stats,omitempty"`
}

func (x *PayOrderOk) Reset() {
	*x = PayOrderOk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderOk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderOk) ProtoMessage() {}

func (x *PayOrderOk) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderOk.ProtoReflect.Descriptor instead.
func (*PayOrderOk) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{2}
}

func (x *PayOrderOk) GetBasePayOrder() *BasePayOrder {
	if x != nil {
		return x.BasePayOrder
	}
	return nil
}

func (x *PayOrderOk) GetSuccessTime() string {
	if x != nil {
		return x.SuccessTime
	}
	return ""
}

func (x *PayOrderOk) GetBalanceDate() string {
	if x != nil {
		return x.BalanceDate
	}
	return ""
}

func (x *PayOrderOk) GetFareAmt() uint32 {
	if x != nil {
		return x.FareAmt
	}
	return 0
}

func (x *PayOrderOk) GetFactAmt() uint32 {
	if x != nil {
		return x.FactAmt
	}
	return 0
}

func (x *PayOrderOk) GetSendNotifyStats() string {
	if x != nil {
		return x.SendNotifyStats
	}
	return ""
}

type PayNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayOrderId string `protobuf:"bytes,1,opt,name=gateway_order_id,json=gatewayOrderId,proto3" json:"gateway_order_id,omitempty"`
	CreateDate     string `protobuf:"bytes,2,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	FailTimes      uint32 `protobuf:"varint,3,opt,name=fail_times,json=failTimes,proto3" json:"fail_times,omitempty"`
	NotifyTime     string `protobuf:"bytes,4,opt,name=notify_time,json=notifyTime,proto3" json:"notify_time,omitempty"`
	Status         string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	NextNotifyTime string `protobuf:"bytes,7,opt,name=next_notify_time,json=nextNotifyTime,proto3" json:"next_notify_time,omitempty"`
	ErrorMessage   string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *PayNotify) Reset() {
	*x = PayNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotify) ProtoMessage() {}

func (x *PayNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotify.ProtoReflect.Descriptor instead.
func (*PayNotify) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{3}
}

func (x *PayNotify) GetGatewayOrderId() string {
	if x != nil {
		return x.GatewayOrderId
	}
	return ""
}

func (x *PayNotify) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *PayNotify) GetFailTimes() uint32 {
	if x != nil {
		return x.FailTimes
	}
	return 0
}

func (x *PayNotify) GetNotifyTime() string {
	if x != nil {
		return x.NotifyTime
	}
	return ""
}

func (x *PayNotify) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PayNotify) GetNextNotifyTime() string {
	if x != nil {
		return x.NextNotifyTime
	}
	return ""
}

func (x *PayNotify) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type PayNotifyOk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayOrderId string `protobuf:"bytes,1,opt,name=gateway_order_id,json=gatewayOrderId,proto3" json:"gateway_order_id,omitempty"`
	CreateDate     string `protobuf:"bytes,2,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	FailTimes      uint32 `protobuf:"varint,3,opt,name=fail_times,json=failTimes,proto3" json:"fail_times,omitempty"`
	NotifyTime     string `protobuf:"bytes,4,opt,name=notify_time,json=notifyTime,proto3" json:"notify_time,omitempty"`
}

func (x *PayNotifyOk) Reset() {
	*x = PayNotifyOk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotifyOk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotifyOk) ProtoMessage() {}

func (x *PayNotifyOk) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotifyOk.ProtoReflect.Descriptor instead.
func (*PayNotifyOk) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{4}
}

func (x *PayNotifyOk) GetGatewayOrderId() string {
	if x != nil {
		return x.GatewayOrderId
	}
	return ""
}

func (x *PayNotifyOk) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *PayNotifyOk) GetFailTimes() uint32 {
	if x != nil {
		return x.FailTimes
	}
	return 0
}

func (x *PayNotifyOk) GetNotifyTime() string {
	if x != nil {
		return x.NotifyTime
	}
	return ""
}

type PayOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrders []*PayOrder `protobuf:"bytes,1,rep,name=pay_orders,json=payOrders,proto3" json:"pay_orders,omitempty"`
}

func (x *PayOrderResponse) Reset() {
	*x = PayOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderResponse) ProtoMessage() {}

func (x *PayOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderResponse.ProtoReflect.Descriptor instead.
func (*PayOrderResponse) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{5}
}

func (x *PayOrderResponse) GetPayOrders() []*PayOrder {
	if x != nil {
		return x.PayOrders
	}
	return nil
}

type PayOrderOkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrderOks []*PayOrderOk `protobuf:"bytes,1,rep,name=pay_order_oks,json=payOrderOks,proto3" json:"pay_order_oks,omitempty"`
}

func (x *PayOrderOkResponse) Reset() {
	*x = PayOrderOkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderOkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderOkResponse) ProtoMessage() {}

func (x *PayOrderOkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderOkResponse.ProtoReflect.Descriptor instead.
func (*PayOrderOkResponse) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{6}
}

func (x *PayOrderOkResponse) GetPayOrderOks() []*PayOrderOk {
	if x != nil {
		return x.PayOrderOks
	}
	return nil
}

type PayNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayNotifies []*PayNotify `protobuf:"bytes,1,rep,name=pay_notifies,json=payNotifies,proto3" json:"pay_notifies,omitempty"`
}

func (x *PayNotifyResponse) Reset() {
	*x = PayNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotifyResponse) ProtoMessage() {}

func (x *PayNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotifyResponse.ProtoReflect.Descriptor instead.
func (*PayNotifyResponse) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{7}
}

func (x *PayNotifyResponse) GetPayNotifies() []*PayNotify {
	if x != nil {
		return x.PayNotifies
	}
	return nil
}

type PayNotifyOkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayNotifyOks []*PayNotifyOk `protobuf:"bytes,1,rep,name=pay_notify_oks,json=payNotifyOks,proto3" json:"pay_notify_oks,omitempty"`
}

func (x *PayNotifyOkResponse) Reset() {
	*x = PayNotifyOkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_db_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayNotifyOkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayNotifyOkResponse) ProtoMessage() {}

func (x *PayNotifyOkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pay_db_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayNotifyOkResponse.ProtoReflect.Descriptor instead.
func (*PayNotifyOkResponse) Descriptor() ([]byte, []int) {
	return file_pay_db_service_proto_rawDescGZIP(), []int{8}
}

func (x *PayNotifyOkResponse) GetPayNotifyOks() []*PayNotifyOk {
	if x != nil {
		return x.PayNotifyOks
	}
	return nil
}

var File_pay_db_service_proto protoreflect.FileDescriptor

var file_pay_db_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x61, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x07, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x66,
	0x0a, 0x08, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4f, 0x6b, 0x12, 0x37, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4f, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x70, 0x61, 0x79,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f,
	0x6b, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x6b, 0x73, 0x22, 0x46,
	0x0a, 0x11, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6b, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4f, 0x6b, 0x73, 0x32, 0xdb, 0x08, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c,
	0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x70,
	0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x70, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x4c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x61, 0x79,
	0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x2e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x4b, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4f, 0x6b, 0x12, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4f, 0x6b, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6f, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x6b, 0x12, 0x0f, 0x2e, 0x70, 0x61, 0x79,
	0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x6b, 0x1a, 0x11, 0x2e, 0x70, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x0e, 0x46,
	0x69, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x6b, 0x12, 0x0f, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x6b, 0x1a, 0x17,
	0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6f,
	0x6b, 0x12, 0x4d, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x01, 0x2a,
	0x12, 0x4f, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x1a, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3a, 0x01,
	0x2a, 0x12, 0x4f, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x67, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x0e, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a,
	0x16, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x53,
	0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6b, 0x12, 0x10,
	0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6b,
	0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6b, 0x3a, 0x01,
	0x2a, 0x12, 0x58, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4f, 0x6b, 0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4f, 0x6b, 0x1a, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61,
	0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6b, 0x12, 0x56, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6b,
	0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4f, 0x6b, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6b,
	0x3a, 0x01, 0x2a, 0x42, 0x1d, 0x0a, 0x16, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x6a, 0x6f, 0x63, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x64, 0x62, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5a, 0x03, 0x70,
	0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pay_db_service_proto_rawDescOnce sync.Once
	file_pay_db_service_proto_rawDescData = file_pay_db_service_proto_rawDesc
)

func file_pay_db_service_proto_rawDescGZIP() []byte {
	file_pay_db_service_proto_rawDescOnce.Do(func() {
		file_pay_db_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pay_db_service_proto_rawDescData)
	})
	return file_pay_db_service_proto_rawDescData
}

var file_pay_db_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pay_db_service_proto_goTypes = []interface{}{
	(*BasePayOrder)(nil),        // 0: pay.BasePayOrder
	(*PayOrder)(nil),            // 1: pay.PayOrder
	(*PayOrderOk)(nil),          // 2: pay.PayOrderOk
	(*PayNotify)(nil),           // 3: pay.PayNotify
	(*PayNotifyOk)(nil),         // 4: pay.PayNotifyOk
	(*PayOrderResponse)(nil),    // 5: pay.PayOrderResponse
	(*PayOrderOkResponse)(nil),  // 6: pay.PayOrderOkResponse
	(*PayNotifyResponse)(nil),   // 7: pay.PayNotifyResponse
	(*PayNotifyOkResponse)(nil), // 8: pay.PayNotifyOkResponse
	(*ReturnResult)(nil),        // 9: pay.ReturnResult
}
var file_pay_db_service_proto_depIdxs = []int32{
	0,  // 0: pay.PayOrder.base_pay_order:type_name -> pay.BasePayOrder
	0,  // 1: pay.PayOrderOk.base_pay_order:type_name -> pay.BasePayOrder
	1,  // 2: pay.PayOrderResponse.pay_orders:type_name -> pay.PayOrder
	2,  // 3: pay.PayOrderOkResponse.pay_order_oks:type_name -> pay.PayOrderOk
	3,  // 4: pay.PayNotifyResponse.pay_notifies:type_name -> pay.PayNotify
	4,  // 5: pay.PayNotifyOkResponse.pay_notify_oks:type_name -> pay.PayNotifyOk
	1,  // 6: pay.PayDatabaseService.SavePayOrder:input_type -> pay.PayOrder
	1,  // 7: pay.PayDatabaseService.UpdatePayOrder:input_type -> pay.PayOrder
	1,  // 8: pay.PayDatabaseService.FindPayOrder:input_type -> pay.PayOrder
	2,  // 9: pay.PayDatabaseService.SavePayOrderOk:input_type -> pay.PayOrderOk
	2,  // 10: pay.PayDatabaseService.UpdatePayOrderOk:input_type -> pay.PayOrderOk
	2,  // 11: pay.PayDatabaseService.FindPayOrderOk:input_type -> pay.PayOrderOk
	3,  // 12: pay.PayDatabaseService.SavePayNotify:input_type -> pay.PayNotify
	3,  // 13: pay.PayDatabaseService.UpdatePayNotify:input_type -> pay.PayNotify
	3,  // 14: pay.PayDatabaseService.FindPayNotify:input_type -> pay.PayNotify
	3,  // 15: pay.PayDatabaseService.FindPayNotifyLessThenTime:input_type -> pay.PayNotify
	4,  // 16: pay.PayDatabaseService.SavePayNotifyOk:input_type -> pay.PayNotifyOk
	4,  // 17: pay.PayDatabaseService.FindPayNotifyOk:input_type -> pay.PayNotifyOk
	4,  // 18: pay.PayDatabaseService.UpdatePayNotifyOk:input_type -> pay.PayNotifyOk
	9,  // 19: pay.PayDatabaseService.SavePayOrder:output_type -> pay.ReturnResult
	9,  // 20: pay.PayDatabaseService.UpdatePayOrder:output_type -> pay.ReturnResult
	5,  // 21: pay.PayDatabaseService.FindPayOrder:output_type -> pay.PayOrderResponse
	9,  // 22: pay.PayDatabaseService.SavePayOrderOk:output_type -> pay.ReturnResult
	9,  // 23: pay.PayDatabaseService.UpdatePayOrderOk:output_type -> pay.ReturnResult
	6,  // 24: pay.PayDatabaseService.FindPayOrderOk:output_type -> pay.PayOrderOkResponse
	9,  // 25: pay.PayDatabaseService.SavePayNotify:output_type -> pay.ReturnResult
	9,  // 26: pay.PayDatabaseService.UpdatePayNotify:output_type -> pay.ReturnResult
	7,  // 27: pay.PayDatabaseService.FindPayNotify:output_type -> pay.PayNotifyResponse
	7,  // 28: pay.PayDatabaseService.FindPayNotifyLessThenTime:output_type -> pay.PayNotifyResponse
	9,  // 29: pay.PayDatabaseService.SavePayNotifyOk:output_type -> pay.ReturnResult
	8,  // 30: pay.PayDatabaseService.FindPayNotifyOk:output_type -> pay.PayNotifyOkResponse
	9,  // 31: pay.PayDatabaseService.UpdatePayNotifyOk:output_type -> pay.ReturnResult
	19, // [19:32] is the sub-list for method output_type
	6,  // [6:19] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_pay_db_service_proto_init() }
func file_pay_db_service_proto_init() {
	if File_pay_db_service_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pay_db_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasePayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_db_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_db_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderOk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_db_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_db_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotifyOk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_db_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_db_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderOkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_db_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_db_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayNotifyOkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pay_db_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pay_db_service_proto_goTypes,
		DependencyIndexes: file_pay_db_service_proto_depIdxs,
		MessageInfos:      file_pay_db_service_proto_msgTypes,
	}.Build()
	File_pay_db_service_proto = out.File
	file_pay_db_service_proto_rawDesc = nil
	file_pay_db_service_proto_goTypes = nil
	file_pay_db_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PayDatabaseServiceClient is the client API for PayDatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PayDatabaseServiceClient interface {
	SavePayOrder(ctx context.Context, in *PayOrder, opts ...grpc.CallOption) (*ReturnResult, error)
	UpdatePayOrder(ctx context.Context, in *PayOrder, opts ...grpc.CallOption) (*ReturnResult, error)
	FindPayOrder(ctx context.Context, in *PayOrder, opts ...grpc.CallOption) (*PayOrderResponse, error)
	SavePayOrderOk(ctx context.Context, in *PayOrderOk, opts ...grpc.CallOption) (*ReturnResult, error)
	UpdatePayOrderOk(ctx context.Context, in *PayOrderOk, opts ...grpc.CallOption) (*ReturnResult, error)
	FindPayOrderOk(ctx context.Context, in *PayOrderOk, opts ...grpc.CallOption) (*PayOrderOkResponse, error)
	SavePayNotify(ctx context.Context, in *PayNotify, opts ...grpc.CallOption) (*ReturnResult, error)
	UpdatePayNotify(ctx context.Context, in *PayNotify, opts ...grpc.CallOption) (*ReturnResult, error)
	FindPayNotify(ctx context.Context, in *PayNotify, opts ...grpc.CallOption) (*PayNotifyResponse, error)
	FindPayNotifyLessThenTime(ctx context.Context, in *PayNotify, opts ...grpc.CallOption) (*PayNotifyResponse, error)
	SavePayNotifyOk(ctx context.Context, in *PayNotifyOk, opts ...grpc.CallOption) (*ReturnResult, error)
	FindPayNotifyOk(ctx context.Context, in *PayNotifyOk, opts ...grpc.CallOption) (*PayNotifyOkResponse, error)
	UpdatePayNotifyOk(ctx context.Context, in *PayNotifyOk, opts ...grpc.CallOption) (*ReturnResult, error)
}

type payDatabaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayDatabaseServiceClient(cc grpc.ClientConnInterface) PayDatabaseServiceClient {
	return &payDatabaseServiceClient{cc}
}

func (c *payDatabaseServiceClient) SavePayOrder(ctx context.Context, in *PayOrder, opts ...grpc.CallOption) (*ReturnResult, error) {
	out := new(ReturnResult)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/SavePayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) UpdatePayOrder(ctx context.Context, in *PayOrder, opts ...grpc.CallOption) (*ReturnResult, error) {
	out := new(ReturnResult)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/UpdatePayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) FindPayOrder(ctx context.Context, in *PayOrder, opts ...grpc.CallOption) (*PayOrderResponse, error) {
	out := new(PayOrderResponse)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/FindPayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) SavePayOrderOk(ctx context.Context, in *PayOrderOk, opts ...grpc.CallOption) (*ReturnResult, error) {
	out := new(ReturnResult)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/SavePayOrderOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) UpdatePayOrderOk(ctx context.Context, in *PayOrderOk, opts ...grpc.CallOption) (*ReturnResult, error) {
	out := new(ReturnResult)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/UpdatePayOrderOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) FindPayOrderOk(ctx context.Context, in *PayOrderOk, opts ...grpc.CallOption) (*PayOrderOkResponse, error) {
	out := new(PayOrderOkResponse)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/FindPayOrderOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) SavePayNotify(ctx context.Context, in *PayNotify, opts ...grpc.CallOption) (*ReturnResult, error) {
	out := new(ReturnResult)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/SavePayNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) UpdatePayNotify(ctx context.Context, in *PayNotify, opts ...grpc.CallOption) (*ReturnResult, error) {
	out := new(ReturnResult)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/UpdatePayNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) FindPayNotify(ctx context.Context, in *PayNotify, opts ...grpc.CallOption) (*PayNotifyResponse, error) {
	out := new(PayNotifyResponse)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/FindPayNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) FindPayNotifyLessThenTime(ctx context.Context, in *PayNotify, opts ...grpc.CallOption) (*PayNotifyResponse, error) {
	out := new(PayNotifyResponse)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/FindPayNotifyLessThenTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) SavePayNotifyOk(ctx context.Context, in *PayNotifyOk, opts ...grpc.CallOption) (*ReturnResult, error) {
	out := new(ReturnResult)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/SavePayNotifyOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) FindPayNotifyOk(ctx context.Context, in *PayNotifyOk, opts ...grpc.CallOption) (*PayNotifyOkResponse, error) {
	out := new(PayNotifyOkResponse)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/FindPayNotifyOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payDatabaseServiceClient) UpdatePayNotifyOk(ctx context.Context, in *PayNotifyOk, opts ...grpc.CallOption) (*ReturnResult, error) {
	out := new(ReturnResult)
	err := c.cc.Invoke(ctx, "/pay.PayDatabaseService/UpdatePayNotifyOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayDatabaseServiceServer is the server API for PayDatabaseService service.
type PayDatabaseServiceServer interface {
	SavePayOrder(context.Context, *PayOrder) (*ReturnResult, error)
	UpdatePayOrder(context.Context, *PayOrder) (*ReturnResult, error)
	FindPayOrder(context.Context, *PayOrder) (*PayOrderResponse, error)
	SavePayOrderOk(context.Context, *PayOrderOk) (*ReturnResult, error)
	UpdatePayOrderOk(context.Context, *PayOrderOk) (*ReturnResult, error)
	FindPayOrderOk(context.Context, *PayOrderOk) (*PayOrderOkResponse, error)
	SavePayNotify(context.Context, *PayNotify) (*ReturnResult, error)
	UpdatePayNotify(context.Context, *PayNotify) (*ReturnResult, error)
	FindPayNotify(context.Context, *PayNotify) (*PayNotifyResponse, error)
	FindPayNotifyLessThenTime(context.Context, *PayNotify) (*PayNotifyResponse, error)
	SavePayNotifyOk(context.Context, *PayNotifyOk) (*ReturnResult, error)
	FindPayNotifyOk(context.Context, *PayNotifyOk) (*PayNotifyOkResponse, error)
	UpdatePayNotifyOk(context.Context, *PayNotifyOk) (*ReturnResult, error)
}

// UnimplementedPayDatabaseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPayDatabaseServiceServer struct {
}

func (*UnimplementedPayDatabaseServiceServer) SavePayOrder(context.Context, *PayOrder) (*ReturnResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePayOrder not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) UpdatePayOrder(context.Context, *PayOrder) (*ReturnResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayOrder not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) FindPayOrder(context.Context, *PayOrder) (*PayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPayOrder not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) SavePayOrderOk(context.Context, *PayOrderOk) (*ReturnResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePayOrderOk not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) UpdatePayOrderOk(context.Context, *PayOrderOk) (*ReturnResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayOrderOk not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) FindPayOrderOk(context.Context, *PayOrderOk) (*PayOrderOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPayOrderOk not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) SavePayNotify(context.Context, *PayNotify) (*ReturnResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePayNotify not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) UpdatePayNotify(context.Context, *PayNotify) (*ReturnResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayNotify not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) FindPayNotify(context.Context, *PayNotify) (*PayNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPayNotify not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) FindPayNotifyLessThenTime(context.Context, *PayNotify) (*PayNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPayNotifyLessThenTime not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) SavePayNotifyOk(context.Context, *PayNotifyOk) (*ReturnResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePayNotifyOk not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) FindPayNotifyOk(context.Context, *PayNotifyOk) (*PayNotifyOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPayNotifyOk not implemented")
}
func (*UnimplementedPayDatabaseServiceServer) UpdatePayNotifyOk(context.Context, *PayNotifyOk) (*ReturnResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayNotifyOk not implemented")
}

func RegisterPayDatabaseServiceServer(s *grpc.Server, srv PayDatabaseServiceServer) {
	s.RegisterService(&_PayDatabaseService_serviceDesc, srv)
}

func _PayDatabaseService_SavePayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).SavePayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/SavePayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).SavePayOrder(ctx, req.(*PayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_UpdatePayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).UpdatePayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/UpdatePayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).UpdatePayOrder(ctx, req.(*PayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_FindPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).FindPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/FindPayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).FindPayOrder(ctx, req.(*PayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_SavePayOrderOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderOk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).SavePayOrderOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/SavePayOrderOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).SavePayOrderOk(ctx, req.(*PayOrderOk))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_UpdatePayOrderOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderOk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).UpdatePayOrderOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/UpdatePayOrderOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).UpdatePayOrderOk(ctx, req.(*PayOrderOk))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_FindPayOrderOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderOk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).FindPayOrderOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/FindPayOrderOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).FindPayOrderOk(ctx, req.(*PayOrderOk))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_SavePayNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).SavePayNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/SavePayNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).SavePayNotify(ctx, req.(*PayNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_UpdatePayNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).UpdatePayNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/UpdatePayNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).UpdatePayNotify(ctx, req.(*PayNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_FindPayNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).FindPayNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/FindPayNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).FindPayNotify(ctx, req.(*PayNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_FindPayNotifyLessThenTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).FindPayNotifyLessThenTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/FindPayNotifyLessThenTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).FindPayNotifyLessThenTime(ctx, req.(*PayNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_SavePayNotifyOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyOk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).SavePayNotifyOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/SavePayNotifyOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).SavePayNotifyOk(ctx, req.(*PayNotifyOk))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_FindPayNotifyOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyOk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).FindPayNotifyOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/FindPayNotifyOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).FindPayNotifyOk(ctx, req.(*PayNotifyOk))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayDatabaseService_UpdatePayNotifyOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyOk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayDatabaseServiceServer).UpdatePayNotifyOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayDatabaseService/UpdatePayNotifyOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayDatabaseServiceServer).UpdatePayNotifyOk(ctx, req.(*PayNotifyOk))
	}
	return interceptor(ctx, in, info, handler)
}

var _PayDatabaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pay.PayDatabaseService",
	HandlerType: (*PayDatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePayOrder",
			Handler:    _PayDatabaseService_SavePayOrder_Handler,
		},
		{
			MethodName: "UpdatePayOrder",
			Handler:    _PayDatabaseService_UpdatePayOrder_Handler,
		},
		{
			MethodName: "FindPayOrder",
			Handler:    _PayDatabaseService_FindPayOrder_Handler,
		},
		{
			MethodName: "SavePayOrderOk",
			Handler:    _PayDatabaseService_SavePayOrderOk_Handler,
		},
		{
			MethodName: "UpdatePayOrderOk",
			Handler:    _PayDatabaseService_UpdatePayOrderOk_Handler,
		},
		{
			MethodName: "FindPayOrderOk",
			Handler:    _PayDatabaseService_FindPayOrderOk_Handler,
		},
		{
			MethodName: "SavePayNotify",
			Handler:    _PayDatabaseService_SavePayNotify_Handler,
		},
		{
			MethodName: "UpdatePayNotify",
			Handler:    _PayDatabaseService_UpdatePayNotify_Handler,
		},
		{
			MethodName: "FindPayNotify",
			Handler:    _PayDatabaseService_FindPayNotify_Handler,
		},
		{
			MethodName: "FindPayNotifyLessThenTime",
			Handler:    _PayDatabaseService_FindPayNotifyLessThenTime_Handler,
		},
		{
			MethodName: "SavePayNotifyOk",
			Handler:    _PayDatabaseService_SavePayNotifyOk_Handler,
		},
		{
			MethodName: "FindPayNotifyOk",
			Handler:    _PayDatabaseService_FindPayNotifyOk_Handler,
		},
		{
			MethodName: "UpdatePayNotifyOk",
			Handler:    _PayDatabaseService_UpdatePayNotifyOk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay_db_service.proto",
}
