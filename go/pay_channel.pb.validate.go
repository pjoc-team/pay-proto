// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pay_channel.proto

package pay

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _pay_channel_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ChannelPayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChannelPayRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GatewayOrderId

	// no validation rules for ChannelAccount

	// no validation rules for PayAmount

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelPayRequestValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NotifyUrl

	// no validation rules for ReturnUrl

	// no validation rules for UserIp

	// no validation rules for Method

	// no validation rules for Meta

	return nil
}

// ChannelPayRequestValidationError is the validation error returned by
// ChannelPayRequest.Validate if the designated constraints aren't met.
type ChannelPayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelPayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelPayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelPayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelPayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelPayRequestValidationError) ErrorName() string {
	return "ChannelPayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelPayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelPayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelPayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelPayRequestValidationError{}

// Validate checks the field values on ChannelPayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChannelPayResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChannelOrderId

	// no validation rules for Data

	return nil
}

// ChannelPayResponseValidationError is the validation error returned by
// ChannelPayResponse.Validate if the designated constraints aren't met.
type ChannelPayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelPayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelPayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelPayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelPayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelPayResponseValidationError) ErrorName() string {
	return "ChannelPayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelPayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelPayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelPayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelPayResponseValidationError{}

// Validate checks the field values on ChannelNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChannelNotifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentAccount

	// no validation rules for Type

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelNotifyRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Method

	return nil
}

// ChannelNotifyRequestValidationError is the validation error returned by
// ChannelNotifyRequest.Validate if the designated constraints aren't met.
type ChannelNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelNotifyRequestValidationError) ErrorName() string {
	return "ChannelNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelNotifyRequestValidationError{}

// Validate checks the field values on ChannelNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChannelNotifyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelNotifyResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChannelNotifyResponseValidationError is the validation error returned by
// ChannelNotifyResponse.Validate if the designated constraints aren't met.
type ChannelNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelNotifyResponseValidationError) ErrorName() string {
	return "ChannelNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelNotifyResponseValidationError{}

// Validate checks the field values on HTTPRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HTTPRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Method

	// no validation rules for Header

	// no validation rules for Url

	// no validation rules for Body

	return nil
}

// HTTPRequestValidationError is the validation error returned by
// HTTPRequest.Validate if the designated constraints aren't met.
type HTTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRequestValidationError) ErrorName() string { return "HTTPRequestValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRequestValidationError{}

// Validate checks the field values on HTTPResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HTTPResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Header

	// no validation rules for Body

	// no validation rules for Status

	return nil
}

// HTTPResponseValidationError is the validation error returned by
// HTTPResponse.Validate if the designated constraints aren't met.
type HTTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPResponseValidationError) ErrorName() string { return "HTTPResponseValidationError" }

// Error satisfies the builtin error interface
func (e HTTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPResponseValidationError{}
