{
  "swagger": "2.0",
  "info": {
    "title": "notify.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Notifier"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/notify/out_trade_no/{out_trade_no}": {
      "put": {
        "operationId": "Notifier_Notify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/payNotifyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "out_trade_no",
            "description": "out_trade_no 业务订单号",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/payNotifyRequest"
            }
          }
        ],
        "tags": [
          "Notifier"
        ]
      }
    }
  },
  "definitions": {
    "NotifyResponseNotifyStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNKNOWN",
        "STATUS_FAILED",
        "STATUS_SUCCESS"
      ],
      "default": "STATUS_UNKNOWN",
      "title": "- STATUS_UNKNOWN: STATUS_UNKNOWN bad status\n - STATUS_FAILED: STATUS_FAILED failed to process notify\n - STATUS_SUCCESS: STATUS_SUCCESS succeed to process notify"
    },
    "payNotifyRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "version api version"
        },
        "out_trade_no": {
          "type": "string",
          "title": "out_trade_no 业务订单号"
        },
        "pay_amount": {
          "type": "integer",
          "format": "int64",
          "title": "pay_amount 支付金额（分）"
        },
        "currency": {
          "type": "string",
          "title": "Currency 币种"
        },
        "return_url": {
          "type": "string",
          "title": "return_url 支付后跳转的前端地址"
        },
        "app_id": {
          "type": "string",
          "title": "app_id 系统给商户分配的app_id"
        },
        "sign_type": {
          "type": "string",
          "title": "sign_type 加密方法，RSA和MD5，默认RSA"
        },
        "sign": {
          "type": "string",
          "title": "sign 签名"
        },
        "order_time": {
          "type": "string",
          "title": "order_time 业务方下单时间，时间格式: 年年年年-月月-日日 时时:分分:秒秒，例如: 2006-01-02 15:04:05"
        },
        "user_ip": {
          "type": "string",
          "title": "user_ip 发起支付的用户ip"
        },
        "user_id": {
          "type": "string",
          "title": "user_id 用户在业务系统的id"
        },
        "payer_account": {
          "type": "string",
          "title": "payer_account 支付者账号，可选"
        },
        "product_id": {
          "type": "string",
          "title": "product_id 业务系统的产品id"
        },
        "product_name": {
          "type": "string",
          "title": "product_name 商品名称"
        },
        "product_describe": {
          "type": "string",
          "title": "product_describe 商品描述"
        },
        "charset": {
          "type": "string",
          "title": "charset 参数编码，只允许utf-8编码；签名时一定要使用该编码获取字节然后再进行签名"
        },
        "callback_json": {
          "type": "string",
          "title": "callback_json 回调业务系统时需要带上的字符串"
        },
        "ext_json": {
          "type": "string",
          "title": "ext_json 扩展json"
        },
        "channel_id": {
          "type": "string",
          "title": "channel_id 渠道id（非必须），如果未指定method，系统会根据method来找到可用的channel_id"
        },
        "method": {
          "type": "string",
          "title": "method 例如：二维码支付，银联支付等。"
        },
        "fact_amt": {
          "type": "integer",
          "format": "int64",
          "title": "fact_amt 实际金额"
        },
        "fare_amt": {
          "type": "integer",
          "format": "int64",
          "title": "fare_amt 手续费"
        }
      },
      "title": "NotifyRequest notify to biz"
    },
    "payNotifyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/NotifyResponseNotifyStatus",
          "title": "status notify status"
        }
      },
      "title": "NotifyResponse response of biz"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
